#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NAV     1
#define SYM     2
#define NUM     3
#define MEDIA   4
#define FUNC    5
#define DEF     6
#define GAME    7
#define FNNAV   8
#define CODENAV 9

&caps_word {
  continue-list = <UNDERSCORE MINUS>;
};

/ {
  combos {
    compatible = "zmk,combos";
    combo_undo {
      timeout-ms = <50>;
      key-positions = <20 21>;
      bindings = <&kp LG(Z)>;
    };
		combo_copy {
      timeout-ms = <50>;
      key-positions = <21 22>;
      bindings = <&kp LG(C)>;
    };
		combo_cut {
      timeout-ms = <50>;
      key-positions = <22 23>;
      bindings = <&kp LG(X)>;
    };
		combo_paste {
      timeout-ms = <50>;
      key-positions = <23 24>;
      bindings = <&kp LG(V)>;
    };
		combo_def {
      timeout-ms = <50>;
      key-positions = <25 26>;
      bindings = <&tog DEF>;
    };
		combo_game {
      timeout-ms = <50>;
      key-positions = <27 28>;
      bindings = <&tog GAME>;
    };
		combo_grave {
      timeout-ms = <50>;
      key-positions = <0 1>;
      bindings = <&kp GRAVE>;
    };
  };
};

/ {

	behaviors {
		hm: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick_tap_ms = <0>;
			flavor = "balanced";
			bindings = <&kp>, <&kp>;
		};
		hs: homerow_shift {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_SHIFT";
			#binding-cells = <2>;
			tapping-term-ms = <175>;
			quick_tap_ms = <0>;
			flavor = "balanced";
			bindings = <&kp>, <&kp>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		default_layer {
			label = "Default";

			bindings = <
				&kp Q         &kp W         &lt MEDIA E         &kp R         &kp T        	         &kp Y          &kp U               &kp I         &kp O      &kp P
				&hm LSHIFT A  &lt SYM S     &hm LC(LS(LALT)) D  &lt NAV F     &hm LC(LG(LALT)) G     &kp H          &hm LC(LS(LALT)) J  &lt NUM K     &lt SYM L  &hm RSHIFT SQT
				&kp Z   			&kp X   		  &kp C               &kp V         &kp B           		   &kp N          &kp M               &kp COMMA     &kp DOT    &kp QMARK
								                    &hm LCTL ESC        &hm LALT TAB  &hm LGUI SPACE         &hm RGUI BSPC  &hm RALT ENTER      &lt FUNC DEL
			>;
		};

			nav_layer {
					label = "Navigation";

					bindings = <
					 &trans  &kp LG(Q)  &kp LG(W)    &trans  &trans     &kp HOME      &kp LA(LEFT)  &kp UP         &kp LA(RIGHT)  &kp END
					 &trans  &mo FNNAV  &mo CODENAV  &trans  &trans     &kp LG(LBKT)  &kp LEFT      &kp DOWN       &kp RIGHT      &kp LG(RBKT)
					 &trans  &trans     &trans       &trans  &trans     &trans        &trans        &trans         &trans         &trans
											 			  &trans       &trans  &trans     &kp TAB       &kp LC(TAB)   &kp LG(GRAVE)
					>;
			};

			sym_layer {
			  label = "Symbols";

				bindings = <
					&kp EXCL   &kp AT    &kp HASH   &kp DLLR   &kp PRCNT     &kp CARET  &kp AMPS  &kp ASTRK  &kp GRAVE  &kp TILDE
					&kp EQUAL  &kp LT    &kp LBRC   &kp LPAR   &kp LBKT      &kp RBKT   &kp RPAR  &kp RBRC   &kp GT     &kp DQT
					&trans     &kp PLUS  &kp MINUS  &kp UNDER  &kp FSLH      &kp BSLH   &kp PIPE  &kp SEMI   &kp COLON  &trans
												       &trans     &trans     &trans        &trans     &trans    &trans
				>;
			};
			
			num_layer {
				label = "Numbers";

				bindings = <
					&trans  &kp N7  &kp N8  &kp N9  &trans     &trans  &trans     &trans  &trans  &trans
					&trans  &kp N4  &kp N5  &kp N6  &trans     &trans  &kp LC(G)  &trans  &trans  &trans
					&trans  &kp N1  &kp N2  &kp N3  &trans     &trans  &trans     &trans  &trans  &trans
												  &trans  &kp N0  &trans     &trans  &trans     &trans
				>;
			};
	
			media_layer {
				label = "Media";

				bindings = <
					&trans  &trans  &trans  &trans  &trans     &trans        &bt BT_PRV    &bt BT_NXT        &trans        &out OUT_TOG
					&trans  &trans  &trans  &trans  &trans     &trans        &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &trans
					&trans  &trans  &trans  &trans  &trans     &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3
													&trans  &trans  &trans     &kp C_VOL_DN  &kp C_MUTE    &kp C_VOL_UP
				>;
			};

			func_layer {
				label = "Func";

				bindings = <
			 		&kp F12  &kp F7  &kp F8  &kp F9  &trans     &trans  &trans  &trans  &trans  &trans
			 		&kp F11  &kp F4  &kp F5  &kp F6  &trans     &trans  &trans  &trans  &trans  &trans
			 		&kp F10  &kp F1  &kp F2  &kp F3  &trans     &trans  &trans  &trans  &trans  &trans
						 				       &trans  &trans  &trans     &trans  &trans  &trans
					>;
			};

		def_layer {
			label = "Def";

			bindings = <
				&trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans
				&kp A   &kp S   &kp D   &kp F   &trans     &trans  &kp J   &kp K   &kp L   &kp SQT
				&trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans
							 	 			  &trans  &trans  &trans     &trans  &trans  &trans
			>;
		};

		game_layer {
			label = "Game";

			bindings = <
				&trans      &kp Q   &kp W   &kp E   &kp R      &trans  &trans  &trans  &trans  &trans
				&kp LSHIFT  &kp A   &kp S   &kp D   &kp F      &trans  &trans  &trans  &trans  &trans
				&trans      &trans  &trans  &kp C   &kp V      &trans  &trans  &trans  &trans  &trans
								            &trans  &trans  &trans     &trans  &trans  &trans
			>;
		};

		fnnav_layer {
			label = "FnNav";

			bindings = <
				&trans  &trans    &trans  &trans  &trans     &trans        &kp LA(LEFT)  &kp PG_UP      &kp LA(RIGHT)  &trans
				&trans  &kp LALT  &none   &trans  &trans     &kp LG(LBKT)  &kp HOME      &kp PG_DN      &kp END        &kp LG(RBKT)
				&trans  &trans    &trans  &trans  &trans     &trans        &trans        &trans         &trans         &trans
											 		&trans  &trans  &trans     &kp TAB       &kp LC(TAB)   &kp LG(GRAVE)
			>;
		};

		codenav_layer {
			label = "CodeNav";

			bindings = <
				&trans  &trans    &trans  &trans  &trans     &trans        &kp LC(LG(LA(U)))  &kp LC(LG(LA(I)))  &kp LC(LG(LA(U)))  &trans
				&trans  &kp LALT  &none   &trans  &trans     &kp LG(LBKT)  &kp LA(LEFT)       &kp LG(LBKT)       &kp LA(RIGHT)      &kp LG(RBKT)
				&trans  &trans    &trans  &trans  &trans     &trans        &trans             &trans             &trans             &trans
												  &trans  &trans  &trans  	 &kp TAB       &kp LC(TAB)        &kp LG(GRAVE)
			>;
		};
	};
};
